unit UUtil.Banco;

interface

uses
  FireDac.Comp.Client,
  FireDAC.Phys.MySQL,
  FireDac.DApt,
  FireDAC.Stan.Def,
  FireDAC.Stan.Async,
  Data.DB,
  DataSet.Serialize,
  System.JSON,
  System.SysUtils;

type
  TUtilBanco = class
    private
      class var FConexao: TFDConnection;

      class procedure AbrirConexao;
      class procedure FecharConexao;
    public
      class function ExecutarConsulta(const aSQL: String): TJSONArray;
      class procedure AtualizarTabela(const aIdentificador: Integer; aValor: Double; aTabela, aCondicao: String);
  end;

implementation

{ TUtilBanco }

class procedure TUtilBanco.AbrirConexao;
var
  xDriver: TFDPhysMySQLDriverLink;
begin
  xDriver := TFDPhysMySQLDriverLink.Create(nil);
  FConexao  := TFDConnection.Create(nil);

  xDriver.VendorLib := ExtractFilePath(ParamStr(0)) + 'libmysql.dll';

  FConexao.DriverName  := 'MySQL';
  FConexao.LoginPrompt := False;
  FConexao.Params.Add('Database=blumob');
  FConexao.Params.Add('User_Name=root');
  FConexao.Params.Add('Password=root');
  FConexao.Params.Add('Server=localhost');
  FConexao.Params.Add('DriverID=MySQL');
  FConexao.Open;
end;

class procedure TUtilBanco.AtualizarTabela(const aIdentificador: Integer; aValor: Double;
  aTabela, aCondicao: String);
var
  xQuery: TFDQuery;
begin
  xQuery := TFDQuery.Create(nil);
  try
    Self.AbrirConexao;
    xQuery.Connection := FConexao;
    xQuery.SQL.Text := Format('UPDATE %s SET saldo = %f Where %s = %d',
                              [aTabela, aValor, aCondicao, aIdentificador]);
    xQuery.ExecSQL;

    Self.FecharConexao;
  finally
    FreeAndNil(xQuery);
  end;
end;

class function TUtilBanco.ExecutarConsulta(const aSQL: String): TJSONArray;
var
  xQuery: TFDQuery;
begin
  xQuery := TFDQuery.Create(nil);
  try
    Self.AbrirConexao;
    xQuery.Connection := FConexao;
    xQuery.Open(aSQL);

    TDataSetSerializeConfig.GetInstance.Export.FormatDate := 'dd/mm/yyyy';
    TDataSetSerializeConfig.GetInstance.Export.FormatTime := 'HH:mm:ss';

    Result := xQuery.ToJSONArray();
    Self.FecharConexao;
  except
    on e: Exception do
      raise Exception.Create(e.Message);
  end;
end;

class procedure TUtilBanco.FecharConexao;
begin
  if Assigned(FConexao) and (FConexao.Connected) then
  begin
    FConexao.Close;
    FreeAndNil(FConexao);
  end;
end;

end.
